rem End the service by calling AWS Teardown

# Using aws command line to create an instance of a reverse proxy server 
# from this tutorial: https://earthly.dev/blog/build-your-own-ngrok-clone/

#Requirements:
# AWS CLI - https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html
  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  unzip awscliv2.zip
  sudo ./aws/install

# jq - sudo yum install jq


#Configuring AWS CLI 
aws configure 
#sed -i.bak 's/\r$//' file.txt
#sed -i.bak 's/\r$//' AWSProxy.sh


rem Get the first VPC id
aws ec2 describe-subnets | jq -r ".Subnets[0] | (.VpcId)" > vpcid.txt
set /p VPCID=<vpcid.txt
echo %VPCID%
pause
erase vpcid.txt
 
rem get Subnet ID
rem eg: %VPCID% vpc-05b7b19c6aea1612b
aws ec2 describe-subnets | jq -r ".Subnets[0] | (.SubnetId)" > subnetid.txt 
set /p SUBNETID=<subnetid.txt
echo %SUBNETID%
pause
erase subnetid.txt 

rem create a key pair
set MYKEYNAME=proxy-key-pair1
aws ec2 create-key-pair --key-name %MYKEYNAME%  > key-output.json
jq -r ".KeyPairId" key-output.json > key_output.txt
set /p KEYPAIRID=<key_output.txt
echo %KEYPAIRID%
pause
erase key_output.txt


rem create a security group
set MYSECURITYGROUP=reverse-proxy1
aws ec2 create-security-group --group-name %MYSECURITYGROUP% --description reverse-proxy --vpc-id %VPCID% > sg-output.json
jq -r ".GroupId" sg-output.json > sggroupid.txt
set /p SGGROUPID=<sggroupid.txt 
echo %SGGROUPID%
pause
erase sggroupid.txt

curl -s https://checkip.amazonaws.com > myip.txt
set /p MYIP=<myip.txt
echo %MYIP%
pause
erase myip.txt

rem configure security groups 
aws ec2 authorize-security-group-ingress --group-id %SGGROUPID% --protocol tcp --port 22 --cidr %MYIP%/32 --no-cli-pager
pause

aws ec2 authorize-security-group-ingress --group-id %SGGROUPID%  --protocol tcp --port 80 --cidr 0.0.0.0/0 --no-cli-pager
pause

rem Create the instance 
aws ec2 run-instances --image-id resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 --count 1 --instance-type t2.micro --key-name %MYKEYNAME% --security-group-ids %SGGROUPID% --subnet-id %SUBNETID%  > ec2-output.json
jq -r ".Instances[] | .InstanceId" ec2-output.json> ec2-output.txt
set /p EC2_ID=<ec2-output.txt
echo %EC2_ID%
pause
erase ec2-output.txt 

rem wait for it to start
aws ec2 wait instance-status-ok --instance-ids %EC2_ID%

#I had to convert the .pem file to a .ppk file - used PuttyGen for that.
#added a passphrase: asdfasdf 

#========
upstream tunnel {
  server 127.0.0.1:8080;
}

server {
  server_name PUBLIC_DNS;
  
  location / {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    
    proxy_pass http://tunnel;
  }
}
#get public DNS 

aws ec2 describe-instances --instance-ids  %EC2_ID% > instance.json
jq -r ".Reservations []| .Instances [] | .PublicDnsName" instance.json > pubdns.txt 
set /p PUB_DNS=<pubdns.txt
echo %PUB_DNS%
erase pubdns.txt

#aws ec2 describe-instances --instance-ids $EC2_ID

#===/etc/nginx/conf.d/server.conf=====
upstream tunnel {
  server 127.0.0.1:8080;
}

server {
  server_name ec2-54-219-174-246.us-west-1.compute.amazonaws.com;
  
  location / {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    
    proxy_pass http://tunnel;
  }
}

#edit /etc/nginx/nginx.conf
add this line:
server_names_hash_bucket_size 128;

after this line:
default_type        application/octet-stream;
sudo sed -i '/default_type        application\/octet-stream;/a server_names_hash_bucket_size 128;' /etc/nginx/nginx.conf


#Start up the reverse proxy service 
#can this be started and then stopped? or does it need to persist?
#i think it is only used to accept the key pair
ssh -i key.pem -R 8080:localhost:8080 ec2-user@ec2-54-219-44-221.us-west-1.compute.amazonaws.com

#on your local computer, run a python webserver on port 8080
#Do this in a directory with an index.html 
#don't put anything you don't want to share with the world
python -m http.server 8080


#in your web browser, go to the AWS URL. This will show the index.html on your local PC 
http://ec2-54-219-44-221.us-west-1.compute.amazonaws.com/


rem Teardown
rem Teardown
aws ec2 terminate-instances --no-cli-pager --instance-ids %EC2_ID% > null
aws ec2 delete-key-pair --no-cli-pager --key-pair-id %KEYPAIRID%
aws ec2 delete-security-group --no-cli-pager --group-id %SGGROUPID%
